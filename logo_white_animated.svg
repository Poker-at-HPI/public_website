<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   viewBox="95 138 20 60"
   id="logo">
   <defs>
      <clipPath id="left-half">
         <rect x="420" y="-340" width="24.22" height="60" />
      </clipPath>
      <clipPath id="right-half">
         <rect x="444.22" y="-340" width="24.22" height="60" />
      </clipPath>
      <path
         style="display:inline;opacity:1"
         d="m 444.22243,-339.50268
            c -9.226,13.15712 -19.0977,20.72857 -19.2617,30.99333 -0.055,3.3239 1.7421,8.97342 7.3711,10.05478 3.652,0.69833 8.6801,-2.25748 8.7851,-8.26252 -0.016,-1.19555 1.2659,-1.16448 1.2539,0.47372 -0.172,4.73672 -1.6714,10.25156 -4.1914,14.74069 4.0287,0 8.0573,0 12.086,0 -2.52,-4.48913 -4.0194,-10.00397 -4.1914,-14.74069 -0.012,-1.6382 1.2699,-1.66927 1.2539,-0.47372 0.105,6.00504 5.1331,8.96085 8.7851,8.26252 5.629,-1.08136 7.4261,-6.73088 7.3711,-10.05478 -0.164,-10.26476 -10.0357,-17.83621 -19.2617,-30.99333 z"
         id="spade" />
  </defs>
  <g
     id="layer1"
     transform="translate(1416.6068,-718.04301)">
    <g
       transform="matrix(1.06667,0,0,1.06667,-1771.39,1220.88)"
       id="SPADE"
       style="display:inline">
      <text x="380" y="-292" font-family="Helvetica" font-size="60" fill="white" pointer-events="none">H</text>
      <use clip-path="url(#right-half)" href="#spade" fill="white" class="spade-animation" />
      <use clip-path="url(#left-half)" href="#spade" fill="#C8102E" class="spade-animation" />
      <text x="466" y="-292" font-family="Helvetica" font-size="60" fill="white" pointer-events="none">I</text>
    </g>
  </g>
  <style>
    .spade-animation {
      transform-origin: center center;
      transform-box: fill-box;
      animation: spin 2s linear paused;
    }

    @keyframes spinTo180 {
      0% {
        transform: rotateY(0deg);
      }
      100% {
        transform: rotateY(180deg);
      }
    }

    @keyframes spinTo360 {
      0% {
        transform: rotateY(180deg);
      }
      100% {
        transform: rotateY(360deg);
      }
    }
    </style>
    <script>
      // NOTE THAT DOUBLE AMPERSANDS ARE NOT ALLOWED IN SVG SCRIPTS!
      document.addEventListener('DOMContentLoaded', () => {
  
        const spade = document.querySelectorAll('.spade-animation');
        let isAnimatingTo180 = false;
        let isAnimatingTo360 = false;

        // Start animating in the other direction right after we are done
        let hasAnimationPotential = false;

        function startAnimatingTo180() {
          spade.forEach(el => {
            el.style.animation = 'spinTo180 1s linear forwards';
            isAnimatingTo180 = true;

          });
          spade[0].addEventListener('animationend', handleAnimationEnd);
        }

        function startAnimatingTo360() {
          spade.forEach(el => {
            el.style.animation = 'spinTo360 1s linear forwards';
            isAnimatingTo360 = true;

          });
          spade[0].addEventListener('animationend', handleAnimationEnd);
        }

        function handleAnimationEnd() {
          spade[0].removeEventListener('animationend', handleAnimationEnd);

          if (isAnimatingTo180) {
            isAnimatingTo180 = false;

            if (hasAnimationPotential) {  // If it has potential: Start animating in other direction again right away!
              hasAnimationPotential = false;
              isAnimatingTo360 = true;
              startAnimatingTo360();
            }
          } else if (isAnimatingTo360) {
            isAnimatingTo360 = false;
            if (hasAnimationPotential) { // If it has potential: Start animating in other direction again right away!
              hasAnimationPotential = false;
              isAnimatingTo180 = true;
              startAnimatingTo180();
            }
          }
        }

        function handleMouseEnter() {
          if (!(isAnimatingTo180 || isAnimatingTo360)) { // If we are not animating, start animating
            hasAnimationPotential = false; // this should already be false but just to make sure
            isAnimatingTo180 = true;
            isAnimatingTo360 = false;  // this should already be false but just to make sure
            startAnimatingTo180();
          } else if (isAnimatingTo180) { // Reset the potential because we are already animating to where we want to go
            hasAnimationPotential = false;
          } else if (isAnimatingTo360) { // We are animating to 360 but afterwards we want to go to 180
            hasAnimationPotential = true;
          }
        }

        function handleMouseLeave() {
          if (!(isAnimatingTo180 || isAnimatingTo360)) { // If we are not animating, start animating
            hasAnimationPotential = false; // this should already be false but just to make sure
            isAnimatingTo180 = false;  // this should already be false but just to make sure
            isAnimatingTo360 = true;
            startAnimatingTo360();
          } else if (isAnimatingTo180) { // Reset the potential because we are already animating to where we want to go
            hasAnimationPotential = true;
          } else if (isAnimatingTo360) { // We are animating to 180 but afterwards we want to go to 360
            hasAnimationPotential = false;
          }
        }

        const logo = document.getElementById('logo');
        logo.addEventListener('mouseenter', handleMouseEnter);
        logo.addEventListener('mouseleave', handleMouseLeave);
        logo.addEventListener('touchstart', handleMouseEnter);
        logo.addEventListener('touchend', handleMouseLeave);
      });
    </script>
</svg>